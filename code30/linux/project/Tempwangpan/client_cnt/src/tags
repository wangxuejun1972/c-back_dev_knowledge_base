!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
CFFLAG	Makefile	/^CFFLAG:=-lcrypt -lpthread -lrt -I ..\/include\/$/;"	m
Compute_file_md5	main_md5.c	/^int Compute_file_md5(const char *file_path, char *md5_str)$/;"	f
Compute_string_md5	main_md5.c	/^int Compute_string_md5(unsigned char *dest_str, unsigned int dest_len, char *md5_str)$/;"	f
ELF	Makefile	/^ELF:=client$/;"	m
MD5Decode	md5.c	/^void MD5Decode(unsigned int *output, unsigned char *input, unsigned int len)$/;"	f
MD5Encode	md5.c	/^void MD5Encode(unsigned char *output,unsigned int *input,unsigned int len)$/;"	f
MD5Final	md5.c	/^void MD5Final(MD5_CTX *context, unsigned char digest[16])$/;"	f
MD5Init	md5.c	/^void MD5Init(MD5_CTX *context)$/;"	f
MD5Transform	md5.c	/^void MD5Transform(unsigned int state[4], unsigned char block[64])$/;"	f
MD5Update	md5.c	/^void MD5Update(MD5_CTX *context, unsigned char *input, unsigned int inputlen)$/;"	f
MD5_SIZE	main_md5.c	12;"	d	file:
MD5_STR_LEN	main_md5.c	13;"	d	file:
OBJS	Makefile	/^OBJS:=$(patsubst %.c,%.o,$(SRCS))$/;"	m
PADDING	md5.c	/^unsigned char PADDING[] =$/;"	v
READ_DATA_SIZE	main_md5.c	11;"	d	file:
SRCS	Makefile	/^SRCS:=$(wildcard *.c)$/;"	m
TOKEN	window.c	/^char TOKEN[40];$/;"	v
dealLine	stdin_deal.c	/^static void dealLine(char* from, char* to){$/;"	f	file:
download	tranFun.c	/^int download(int socketFd, char* filename){$/;"	f
downloadPart	tranFun.c	/^int downloadPart(char* ip,char* port,char* fileName,char* md5,char* passwd, size_t begin, size_t end)$/;"	f
epollAdd	client.c	/^int epollAdd(int epfd, int fd)$/;"	f
exitFds	client.c	/^int exitFds[2];$/;"	v
exitHandler	client.c	/^void exitHandler(int signum)$/;"	f
factoryDestroy	factory.c	/^void factoryDestroy(pFactory_t pf){$/;"	f
factoryInit	factory.c	/^int factoryInit(pFactory_t pf,int threadNum,int capacity){$/;"	f
factoryStart	factory.c	/^int factoryStart(pFactory_t pf){$/;"	f
getCommendFromStdin	stdin_deal.c	/^int getCommendFromStdin(char* dataStr){$/;"	f
getsReadyFunc	client.c	/^int getsReadyFunc(int socketFd, char* fileName, pFactory_t pf)$/;"	f
helpManual	window.c	/^void helpManual(){$/;"	f
isAlpha	stdin_deal.c	/^static int isAlpha(char c){$/;"	f	file:
isSpace	stdin_deal.c	/^static int isSpace(char c){$/;"	f	file:
main	client.c	/^int main(int argc,char* argv[])$/;"	f
printForCd	client.c	/^void printForCd(char* buf)$/;"	f
printForLs	client.c	/^void printForLs(char* buf)$/;"	f
printForPwd	client.c	/^void printForPwd(char* buf)$/;"	f
printForRm	client.c	/^void printForRm(char* buf)$/;"	f
queDestroy	work_que.c	/^void queDestroy(pQue_t pq){$/;"	f
queGet	work_que.c	/^int queGet(pQue_t pq, pNode_t *p){$/;"	f
queInit	work_que.c	/^void queInit(pQue_t pq, int capacity){$/;"	f
queInsert	work_que.c	/^void queInsert(pQue_t pq, pNode_t pNew){$/;"	f
recvCycle	recvFun.c	/^int recvCycle(int sfd, void* buf, int fileSize){$/;"	f
recvCycleFile	recvFun.c	/^int recvCycleFile(int sfd, void* buf, int fileSize){$/;"	f
sendMSG	factory.c	/^void sendMSG(int socketFd, int command, linkMsg_t* plmsg)$/;"	f
simpleCommend	tranFun.c	/^int simpleCommend(int socketFd, char* dirName, int command, void (*print)(char* Info))$/;"	f
simpleCommendNoParameter	tranFun.c	/^int simpleCommendNoParameter(int socketFd, int command, void (*print)(char* Info))$/;"	f
tcp_client	tcp_cli.c	/^int tcp_client(char* ip, char* port){$/;"	f
threadExitFunc	factory.c	/^void threadExitFunc(void *p){$/;"	f
threadFun	factory.c	/^void* threadFun(void *p){$/;"	f
upload	tranFun.c	/^int upload(int socketFd, char* filename){$/;"	f
userEnroll	window.c	/^static int userEnroll(int fd){$/;"	f	file:
userLogin	window.c	/^static int userLogin(int fd){$/;"	f	file:
windowForLogin	window.c	/^int windowForLogin(int fd){$/;"	f
